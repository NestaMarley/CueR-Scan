<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>QR Code Attendance System</title>
<style>
  /* Reset & base */
  * {
    box-sizing: border-box;
  }
  body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
    margin: 0; padding: 0;
    color: #fff;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
  }
  header {
    padding: 1.5rem 1rem;
    text-align: center;
    font-weight: 700;
    font-size: 1.8rem;
    letter-spacing: 1.2px;
    user-select: none;
    margin-bottom: 1rem;
    text-shadow: 0 0 8px rgba(0,0,0,0.3);
  }
  main {
    background: rgba(255,255,255,0.1);
    border-radius: 16px;
    padding: 2rem;
    max-width: 480px;
    width: 90vw;
    box-shadow: 0 8px 24px rgba(0,0,0,0.3);
  }
  section {
    margin-bottom: 2rem;
  }
  h2 {
    font-weight: 600;
    margin-bottom: 0.75rem;
    border-bottom: 2px solid #fff;
    padding-bottom: 0.3rem;
  }
  label {
    display: block;
    margin-bottom: 0.4rem;
    font-weight: 600;
  }
  input[type="text"], select {
    width: 100%;
    padding: 0.6rem 1rem;
    border-radius: 8px;
    border: none;
    font-size: 1rem;
    outline: none;
    transition: box-shadow 0.3s ease;
  }
  input[type="text"]:focus, select:focus {
    box-shadow: 0 0 8px 2px #fff;
  }
  button {
    background: #fff;
    color: #2575fc;
    font-weight: 700;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 12px;
    cursor: pointer;
    font-size: 1.1rem;
    transition: background-color 0.3s ease, color 0.3s ease;
    user-select: none;
  }
  button:hover {
    background-color: #e0e0e0;
    color: #1a52d1;
  }
  .attendance-log {
    max-height: 180px;
    overflow-y: auto;
    background: rgba(255,255,255,0.15);
    border-radius: 12px;
    padding: 1rem;
    font-size: 0.9rem;
    line-height: 1.4;
  }
  .attendance-log p {
    margin: 0.2rem 0;
  }
  .status-emoji {
    font-size: 2.5rem;
    cursor: pointer;
    user-select: none;
    margin: 0 0.3rem;
    transition: transform 0.2s ease;
  }
  .status-emoji:hover {
    transform: scale(1.3);
  }
  .selected-emoji {
    box-shadow: 0 0 12px 3px #fff;
    border-radius: 50%;
  }
  .bingo-winner {
    background: #fff;
    color: #2575fc;
    font-weight: 700;
    padding: 0.75rem 1rem;
    border-radius: 12px;
    text-align: center;
    margin-top: 1rem;
    user-select: none;
  }
  @media (max-width: 480px) {
    main {
      padding: 1.5rem 1rem;
    }
    button {
      width: 100%;
    }
  }
</style>
</head>
<body>

<header>üéâ QR Code Attendance System</header>

<main>
  <!-- QR Code Scan Simulation -->
  <section>
    <h2>Scan QR Code (Student ID)</h2>
    <label for="studentIdInput">Enter Student ID:</label>
    <input type="text" id="studentIdInput" placeholder="e.g. S12345" autocomplete="off" />
    <button id="markAttendanceBtn">Mark Attendance</button>
  </section>

  <!-- Emoji Status -->
  <section>
    <h2>How Are You Feeling Today? üòä</h2>
    <div id="emojiPicker" aria-label="Select your mood">
      <span class="status-emoji" role="button" tabindex="0" data-emoji="üòÄ" title="Happy">üòÄ</span>
      <span class="status-emoji" role="button" tabindex="0" data-emoji="üòê" title="Okay">üòê</span>
      <span class="status-emoji" role="button" tabindex="0" data-emoji="üòî" title="Sad">üòî</span>
      <span class="status-emoji" role="button" tabindex="0" data-emoji="üò¥" title="Tired">üò¥</span>
      <span class="status-emoji" role="button" tabindex="0" data-emoji="ü§©" title="Excited">ü§©</span>
    </div>
  </section>

  <!-- Attendance Log -->
  <section>
    <h2>Today's Attendance Log</h2>
    <div class="attendance-log" id="attendanceLog" aria-live="polite" aria-atomic="true">
      <p>No attendance marked yet.</p>
    </div>
  </section>

  <!-- Attendance Bingo -->
  <section>
    <h2>Attendance Bingo üé≤</h2>
    <button id="pickWinnerBtn">Pick a Random Present Student</button>
    <div class="bingo-winner" id="bingoWinner" aria-live="polite"></div>
  </section>
</main>

<script>
  // Simulated backend storage (in-memory)
  const attendance = new Map(); // studentId -> { timestamp, emoji }
  const attendanceLogEl = document.getElementById('attendanceLog');
  const studentIdInput = document.getElementById('studentIdInput');
  const markAttendanceBtn = document.getElementById('markAttendanceBtn');
  const emojiPicker = document.getElementById('emojiPicker');
  const bingoWinnerEl = document.getElementById('bingoWinner');

  // Selected emoji for current student
  let selectedEmoji = '';

  // Helper: Format timestamp nicely
  function formatTimestamp(ts) {
    const d = new Date(ts);
    return d.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
  }

  // Update attendance log UI
  function updateAttendanceLog() {
    if (attendance.size === 0) {
      attendanceLogEl.innerHTML = '<p>No attendance marked yet.</p>';
      return;
    }
    let html = '';
    attendance.forEach((data, id) => {
      const emoji = data.emoji ? ` ${data.emoji}` : '';
      html += `<p><strong>${id}</strong> - Present at ${formatTimestamp(data.timestamp)}${emoji}</p>`;
    });
    attendanceLogEl.innerHTML = html;
  }

  // Mark attendance function
  function markAttendance() {
    const id = studentIdInput.value.trim().toUpperCase();
    if (!id) {
      alert('Please enter a valid Student ID.');
      return;
    }
    if (attendance.has(id)) {
      alert(`Attendance for ${id} already marked today.`);
      return;
    }
    attendance.set(id, { timestamp: Date.now(), emoji: selectedEmoji });
    updateAttendanceLog();
    studentIdInput.value = '';
    selectedEmoji = '';
    clearEmojiSelection();
  }

  // Emoji selection handlers
  function clearEmojiSelection() {
    emojiPicker.querySelectorAll('.status-emoji').forEach(el => {
      el.classList.remove('selected-emoji');
    });
  }
  emojiPicker.addEventListener('click', e => {
    if (e.target.classList.contains('status-emoji')) {
      clearEmojiSelection();
      e.target.classList.add('selected-emoji');
      selectedEmoji = e.target.dataset.emoji;
    }
  });
  emojiPicker.addEventListener('keydown', e => {
    if (e.target.classList.contains('status-emoji') && (e.key === 'Enter' || e.key === ' ')) {
      e.preventDefault();
      e.target.click();
    }
  });

  // Attendance Bingo - pick random present student
  document.getElementById('pickWinnerBtn').addEventListener('click', () => {
    const presentStudents = Array.from(attendance.keys());
    if (presentStudents.length === 0) {
      bingoWinnerEl.textContent = 'No students have marked attendance yet.';
      return;
    }
    const winner = presentStudents[Math.floor(Math.random() * presentStudents.length)];
    bingoWinnerEl.textContent = `üéâ Congrats to ${winner}! You won the Attendance Bingo! üéâ`;
  });

  // Button click to mark attendance
  markAttendanceBtn.addEventListener('click', markAttendance);

  // Enter key triggers attendance marking
  studentIdInput.addEventListener('keydown', e => {
    if (e.key === 'Enter') {
      markAttendance();
    }
  });
</script>

</body>
</html>
